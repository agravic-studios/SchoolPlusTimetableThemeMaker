{"version":3,"sources":["logo.svg","components/FormBase.jsx","components/ColorForm.jsx","data/ThemeSet.jsx","components/TextForm.jsx","components/FormSide.jsx","components/Preview.jsx","components/PreviewSide.jsx","App.js","reportWebVitals.js","index.js"],"names":["React","Component","ColorForm","onChangeBackgroundColor","e","value","target","length","setState","backgroundColorInput","props","onChangeTextColor","textColorInput","ColorStateDisplay","styled","div","textColor","backgroundColor","state","console","log","this","defaultBackgroundColor","defaultTextColor","deletable","onDelete","className","join","label","type","autoComplete","placeholder","onChange","bind","defaultValue","onClick","ColorSet","primary","secondary","surface","headerSurface","headerHighlight","indexSurface","indexHighlight","series","ThemeSet","id","name","version","lightDivider","colorThemeTypes","backgroundColors","textColors","formKeys","solid","twotone","checked","subject","forms","section","items","key","FormSideContainer","FormSide","themeSet","onModifyThemeSet","useState","seriesBackgroundColors","setSeriesBackgroundColors","seriesTextColors","setSeriesTextColors","viewResult","setViewResult","json","setJson","map","i","item","bgColors","txColors","modifier","types","Set","add","delete","set","getFormDiv","index","tmp","filter","fValue","fIndex","style","padding","concat","jsonStr","JSON","stringify","link","document","createElement","download","blob","Blob","href","window","URL","createObjectURL","click","Cell","cellStyle","cellLightDivider","cell","color","daysOfWeek","cellData","getSubjectIndex","charCodeAt","getCellBackgroundTableData","colorThemeType","cells","row","rowIndex","colIndex","seriesLength","getSubjectBackgroundColor","getCellTextTableData","getSubjectTextColor","borderWidth","borderStyle","borderColor","width","height","textAlign","table","marginLeft","marginRight","borderSpacing","PreviewTable","cellBackgroundColors","cellTextColors","data","PreviewSideContainer","PreviewSideInner","PreviewSide","setColorThemeType","select","options","selectedIndex","Preview","AppContainer","App","setThemeSet","modifiedParts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f4da648.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FormBase extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      inputValue: \"\",\r\n      submitValue: \"\",\r\n    };\r\n  }\r\n\r\n  onSubmitData = (e) => {\r\n    e.preventDefault();\r\n    const value = this.state.inputValue;\r\n    this.setState({\r\n      submitValue: value,\r\n    });\r\n\r\n    this.props.onSubmit && this.props.onSubmit(value);\r\n  };\r\n\r\n  onChangeInput = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({\r\n      inputValue: value,\r\n    });\r\n\r\n    this.props.onSubmit && this.props.onSubmit(value);\r\n  };\r\n\r\n  /*\r\n   * =====================\r\n   *   Common Interfaces\r\n   * =====================\r\n   */\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nFormBase.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default FormBase;\r\n","import React from \"react\";\r\nimport FormBase from \"./FormBase\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"../css/Forms.css\";\r\n\r\nclass ColorForm extends React.Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func,\r\n    onChangeBackgroundColor: PropTypes.func,\r\n    onChangeTextColor: PropTypes.func,\r\n    deletable: PropTypes.bool,\r\n    onDelete: PropTypes.func,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      backgroundColorInput: \"\",\r\n      textColorInput: \"\",\r\n    };\r\n  }\r\n\r\n  onChangeBackgroundColor = (e) => {\r\n    var value = e.target.value;\r\n    if (value.length == 1 && value != \"#\") {\r\n      value = \"#\" + value;\r\n    }\r\n    this.setState({\r\n      backgroundColorInput: value,\r\n    });\r\n    this.props.onChangeBackgroundColor &&\r\n      this.props.onChangeBackgroundColor(value);\r\n  };\r\n\r\n  onChangeTextColor = (e) => {\r\n    var value = e.target.value;\r\n    if (value.length == 1 && value != \"#\") {\r\n      value = \"#\" + value;\r\n    }\r\n    this.setState({\r\n      textColorInput: value,\r\n    });\r\n    this.props.onChangeTextColor && this.props.onChangeTextColor(value);\r\n  };\r\n\r\n  ColorStateDisplay = styled.div`\r\n    width: 96px;\r\n    height: 48px;\r\n    margin-right: 8px;\r\n    color: ${(props) => props.textColor || \"black\"};\r\n    background-color: ${(props) => props.backgroundColor || \"white\"};\r\n    box-shadow: 0 0 4px rgba(0, 0, 0, 0.25);\r\n    display: inline-block;\r\n    text-align: center;\r\n    line-height: 48px;\r\n  `;\r\n\r\n  render() {\r\n    console.log(\"Color Form Rendering...\");\r\n    const {\r\n      defaultBackgroundColor,\r\n      defaultTextColor,\r\n      deletable,\r\n      onDelete,\r\n    } = this.props;\r\n    const { backgroundColorInput, textColorInput } = this.state;\r\n    return (\r\n      <div className={[\"color-form\", this.props.className].join(\" \")}>\r\n        <this.ColorStateDisplay\r\n          backgroundColor={backgroundColorInput}\r\n          textColor={textColorInput}\r\n        >\r\n          {this.props.label}\r\n        </this.ColorStateDisplay>\r\n        <div className=\"inner-form\">\r\n          <input\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Background\"\r\n            onChange={this.onChangeBackgroundColor.bind(this)}\r\n            defaultValue={defaultBackgroundColor}\r\n            value={backgroundColorInput}\r\n          />\r\n          <input\r\n            type=\"color\"\r\n            value={backgroundColorInput}\r\n            onChange={this.onChangeBackgroundColor.bind(this)}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Text\"\r\n            onChange={this.onChangeTextColor.bind(this)}\r\n            defaultValue={defaultTextColor}\r\n            value={textColorInput}\r\n          />\r\n          <input\r\n            type=\"color\"\r\n            value={textColorInput}\r\n            onChange={this.onChangeTextColor.bind(this)}\r\n          />\r\n          {deletable && (\r\n            <button type=\"button\" onClick={onDelete}>\r\n              Delete\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nColorForm.propTypes = {\r\n  className: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChangeBackgroundColor: PropTypes.func,\r\n  onChangeTextColor: PropTypes.func,\r\n};\r\n\r\nexport default ColorForm;\r\n","export class ColorSet {\r\n  primary: String = \"\";\r\n  secondary: String = \"\";\r\n  surface: String = \"\";\r\n  headerSurface: String = \"\";\r\n  headerHighlight: String = \"\";\r\n  indexSurface: String = \"\";\r\n  indexHighlight: String = \"\";\r\n  series = [];\r\n}\r\nexport class ThemeSet {\r\n  id: String = \"\";\r\n  name: String = \"\";\r\n  version: Int = 0;\r\n  lightDivider: Boolean = false;\r\n  colorThemeTypes = [];\r\n  backgroundColors: ColorSet = new ColorSet();\r\n  textColors: ColorSet = new ColorSet();\r\n}\r\n","import React from \"react\";\r\nimport FormBase from \"./FormBase\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass TextForm extends React.Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func,\r\n    onChangeBackgroundColor: PropTypes.func,\r\n    onChangeTextColor: PropTypes.func,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      backgroundColorInput: \"\",\r\n      backgroundColorSubmit: \"\",\r\n      textColorInput: \"\",\r\n      textColorSubmit: \"\",\r\n    };\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const bg = this.state.backgroundColorInput;\r\n    const tx = this.state.textColorInput;\r\n    this.setState({\r\n      backgroundColorSubmit: bg,\r\n      textColorSubmit: tx,\r\n    });\r\n\r\n    this.props.onSubmit && this.props.onSubmit(bg, tx);\r\n  };\r\n\r\n  onChangeBackgroundColor = (e) => {\r\n    var value = e.target.value;\r\n    this.setState({\r\n      backgroundColorInput: value,\r\n    });\r\n  };\r\n\r\n  onChangeTextColor = (e) => {\r\n    var value = e.target.value;\r\n    if (value.length == 1 && value != \"#\") {\r\n      value = \"#\" + value;\r\n    }\r\n    this.setState({\r\n      textColorInput: value,\r\n    });\r\n  };\r\n\r\n  ColorStateDisplay = styled.div`\r\n    width: 48px;\r\n    height: 48px;\r\n    margin-right: 8px;\r\n    color: ${(props) => props.textColor || \"black\"};\r\n    background-color: ${(props) => props.backgroundColor || \"white\"};\r\n    box-shadow: 0 0 4px rgba(0, 0, 0, 0.25);\r\n  `;\r\n\r\n  Container = styled.div`\r\n    display: flex !important;\r\n    flex-direction: row;\r\n    align-items: center;\r\n  `;\r\n\r\n  render() {\r\n    const {\r\n      backgroundColorInput,\r\n      backgroundColorSubmit,\r\n      textColorInput,\r\n      textColorSubmit,\r\n    } = this.state;\r\n    return (\r\n      <this.Container className={this.props.className}>\r\n        <form onSubmit={this.onSubmit.bind(this)}>\r\n          <label>\r\n            {this.props.label}:{\" \"}\r\n            <input\r\n              type={this.props.number ? \"number\" : \"text\"}\r\n              autoComplete=\"off\"\r\n              onChange={this.onChangeBackgroundColor.bind(this)}\r\n              value={backgroundColorInput}\r\n            />\r\n          </label>\r\n        </form>\r\n      </this.Container>\r\n    );\r\n  }\r\n}\r\n\r\nTextForm.propTypes = {\r\n  className: PropTypes.string,\r\n  label: PropTypes.string,\r\n  number: PropTypes.bool,\r\n};\r\n\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\r\nimport ColorForm from \"./ColorForm\";\r\nimport styled from \"styled-components\";\r\n\r\nimport \"../css/FormSide.css\";\r\nimport TextForm from \"./TextForm\";\r\nimport { ThemeSet } from \"../data/ThemeSet\";\r\n\r\nconst formKeys = {\r\n  id: \"id\",\r\n  name: \"name\",\r\n  name_ko: \"name_ko\",\r\n  version: \"version\",\r\n\r\n  lightDivider: \"lightDivider\",\r\n\r\n  colorSurface: \"surface\",\r\n  colorPrimary: \"primary\",\r\n  colorSecondary: \"secondary\",\r\n\r\n  colorHeaderSurface: \"headerSurface\",\r\n  colorHeaderHighlight: \"headerHighlight\",\r\n  colorIndexSurface: \"indexSurface\",\r\n  colorIndexHighlight: \"indexHighlight\",\r\n\r\n  themeTypes: {\r\n    solid: \"Solid\",\r\n    twotone: \"TwoTone\",\r\n    checked: \"Checked\",\r\n    subject: \"Subject\",\r\n  },\r\n};\r\n\r\nconst forms = [\r\n  {\r\n    section: \"Manifest\",\r\n    items: [\r\n      { label: \"ID\", type: \"text\", key: formKeys.id },\r\n      { label: \"Name (EN)\", type: \"text\", key: formKeys.name },\r\n      { label: \"Name (KO)\", type: \"text\", key: formKeys.name_ko },\r\n      { label: \"Version\", type: \"number\", key: formKeys.version },\r\n    ],\r\n  },\r\n\r\n  {\r\n    section: \"Theme Types\",\r\n    items: [\r\n      { label: \"Solid\", type: \"theme-types\", key: formKeys.themeTypes.solid },\r\n      {\r\n        label: \"Two Tone\",\r\n        type: \"theme-types\",\r\n        key: formKeys.themeTypes.twotone,\r\n      },\r\n      {\r\n        label: \"Checked Pattern\",\r\n        type: \"theme-types\",\r\n        key: formKeys.themeTypes.checked,\r\n      },\r\n      {\r\n        label: \"Various / Subjects\",\r\n        type: \"theme-types\",\r\n        key: formKeys.themeTypes.subject,\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    section: \"Basic Colors\",\r\n    items: [\r\n      {\r\n        label: \"Light Divider Color\",\r\n        type: \"toggle\",\r\n        key: formKeys.lightDivider,\r\n      },\r\n      { label: \"Primary\", type: \"basic-color\", key: formKeys.colorPrimary },\r\n      { label: \"Secondary\", type: \"basic-color\", key: formKeys.colorSecondary },\r\n      { label: \"Surface\", type: \"basic-color\", key: formKeys.colorSurface },\r\n\r\n      {\r\n        label: \"Header\",\r\n        type: \"basic-color\",\r\n        key: formKeys.colorHeaderSurface,\r\n      },\r\n      {\r\n        label: \"Header*\",\r\n        type: \"basic-color\",\r\n        key: formKeys.colorHeaderHighlight,\r\n      },\r\n      {\r\n        label: \"Index\",\r\n        type: \"basic-color\",\r\n        key: formKeys.colorIndexSurface,\r\n      },\r\n      {\r\n        label: \"Index*\",\r\n        type: \"basic-color\",\r\n        key: formKeys.colorIndexHighlight,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n/*var seriesColors = [\r\n  { backgroundColor: \"\", textColor: \"\" },\r\n  { backgroundColor: \"\", textColor: \"\" },\r\n  { backgroundColor: \"\", textColor: \"\" },\r\n  { backgroundColor: \"\", textColor: \"\" },\r\n];*/\r\n\r\nfunction getFormDiv(item, themeSet, onModifyThemeSet) {\r\n  if (item.type == \"basic-color\") {\r\n    return (\r\n      <ColorForm\r\n        label={item.label}\r\n        onChangeBackgroundColor={(value) => {\r\n          var bgColors = { ...themeSet.backgroundColors };\r\n          bgColors[item.key] = value;\r\n          onModifyThemeSet({\r\n            backgroundColors: bgColors,\r\n          });\r\n        }}\r\n        onChangeTextColor={(value) => {\r\n          var txColors = { ...themeSet.textColors };\r\n          txColors[item.key] = value;\r\n          onModifyThemeSet({\r\n            textColors: txColors,\r\n          });\r\n        }}\r\n      />\r\n    );\r\n  } else if (item.type == \"toggle\") {\r\n    return (\r\n      <div>\r\n        <label>{item.label}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={item.key}\r\n          value=\"toggle\"\r\n          onChange={(e) => {\r\n            const checked = e.target.checked;\r\n            var modifier = {};\r\n            modifier[item.key] = checked;\r\n            onModifyThemeSet(modifier);\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  } else if (item.type == \"theme-types\") {\r\n    return (\r\n      <div>\r\n        <label>{item.label}</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={item.key}\r\n          value=\"toggle\"\r\n          onChange={(e) => {\r\n            const checked = e.target.checked;\r\n            var types = new Set(themeSet.colorThemeTypes);\r\n            if (checked) {\r\n              types.add(item.key);\r\n            } else {\r\n              types.delete(item.key);\r\n            }\r\n            onModifyThemeSet({\r\n              colorThemeTypes: [...types],\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <label>{item.label}</label>\r\n        <input\r\n          type={item.type}\r\n          onChange={(e) => {\r\n            var set = {};\r\n            set[item.key] = e.target.value;\r\n            onModifyThemeSet(set);\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction FormSide({ themeSet, onModifyThemeSet }) {\r\n  const [seriesBackgroundColors, setSeriesBackgroundColors] = useState([]);\r\n  const [seriesTextColors, setSeriesTextColors] = useState([]);\r\n\r\n  const [viewResult, setViewResult] = useState(false);\r\n  const [json, setJson] = useState(\"\");\r\n\r\n  const onChangeInput = (key, value) => {\r\n    if (key == formKeys.colorPrimary) {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormSideContainer>\r\n      <h1>Buddle Timetable Theme Maker</h1>\r\n      <form autoComplete=\"off\">\r\n        {forms.map((section) => (\r\n          <>\r\n            <h4>{section.section}</h4>\r\n            {section.items.map((i) =>\r\n              getFormDiv(i, themeSet, onModifyThemeSet.bind(this))\r\n            )}\r\n          </>\r\n        ))}\r\n\r\n        {/*<h4>Manifest</h4>\r\n\r\n        <div>\r\n          <label>ID</label>\r\n          <input type=\"text\" />\r\n        </div>\r\n        <div>\r\n          <label>Name (EN)</label>\r\n          <input type=\"text\" />\r\n        </div>\r\n        <div>\r\n          <label>Name (KO)</label>\r\n          <input type=\"text\" />\r\n        </div>\r\n        <div>\r\n          <label>Version</label>\r\n          <input type=\"number\" />\r\n        </div>\r\n        <div>\r\n          <input type=\"checkbox\" name=\"divider-light\" value=\"light\" />\r\n          <label>Light Divider Color</label>\r\n        </div>\r\n\r\n        <h4>Basic Colors</h4>\r\n        <ColorForm label=\"Surface\" />\r\n        <ColorForm label=\"Primary\" />\r\n        <ColorForm label=\"Secondary\" />*/}\r\n\r\n        <h4>Series Colors</h4>\r\n        {seriesBackgroundColors.map((item, index) => (\r\n          <ColorForm\r\n            label={`Series #${index + 1}`}\r\n            onChangeBackgroundColor={(value) => {\r\n              var tmp = seriesBackgroundColors;\r\n              tmp[index] = value;\r\n              setSeriesBackgroundColors(tmp);\r\n            }}\r\n            onChangeTextColor={(value) => {\r\n              var tmp = seriesTextColors;\r\n              tmp[index] = value;\r\n              setSeriesTextColors(tmp);\r\n            }}\r\n            deletable={index == seriesBackgroundColors.length - 1}\r\n            onDelete={() => {\r\n              setSeriesBackgroundColors(\r\n                seriesBackgroundColors.filter(\r\n                  (fValue, fIndex) => fIndex !== index\r\n                )\r\n              );\r\n              setSeriesTextColors(\r\n                seriesTextColors.filter((fValue, fIndex) => fIndex !== index)\r\n              );\r\n            }}\r\n            defaultBackgroundColor={seriesBackgroundColors[index]}\r\n            defaultTextColor={seriesTextColors[index]}\r\n          />\r\n        ))}\r\n        <button\r\n          type=\"button\"\r\n          style={{ padding: \"8px\" }}\r\n          onClick={() => {\r\n            setSeriesBackgroundColors(seriesBackgroundColors.concat(\"\"));\r\n            setSeriesTextColors(seriesTextColors.concat(\"\"));\r\n          }}\r\n        >\r\n          Add Series Color\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          style={{ padding: \"8px\" }}\r\n          onClick={() => {\r\n            onModifyThemeSet({\r\n              backgroundColors: {\r\n                ...themeSet.backgroundColors,\r\n                series: seriesBackgroundColors,\r\n              },\r\n              textColors: {\r\n                ...themeSet.textColors,\r\n                series: seriesTextColors,\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          Apply Series Colors\r\n        </button>\r\n      </form>\r\n\r\n      <hr />\r\n\r\n      <h5>Load</h5>\r\n      <input type=\"file\" style={{ padding: \"16px\" }} />\r\n\r\n      <h5>Save</h5>\r\n      <button\r\n        type=\"button\"\r\n        style={{ padding: \"16px\" }}\r\n        onClick={() => {\r\n          setViewResult(true);\r\n\r\n          const jsonStr = JSON.stringify(themeSet);\r\n          setJson(jsonStr);\r\n\r\n          var link = document.createElement(\"a\");\r\n          link.download = \"TimetableTheme_\" + themeSet.id + \".json\";\r\n          var blob = new Blob([jsonStr], { type: \"text/plain\" });\r\n          link.href = window.URL.createObjectURL(blob);\r\n          link.click();\r\n        }}\r\n      >\r\n        Save...\r\n      </button>\r\n\r\n      <hr />\r\n\r\n      {viewResult && <div style={{ padding: 8 }}>{json}</div>}\r\n    </FormSideContainer>\r\n  );\r\n}\r\n\r\nconst FormSideContainer = styled.div`\r\n  flex: 1;\r\n  max-height: 100vh;\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n  padding: 16px;\r\n  justify-items: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport default FormSide;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction Cell({ value, themeSet, backgroundColor, textColor }) {\r\n  var cellStyle = themeSet.lightDivider\r\n    ? { ...style.cellLightDivider }\r\n    : { ...style.cell };\r\n\r\n  cellStyle = {\r\n    ...cellStyle,\r\n    backgroundColor: backgroundColor,\r\n    color: textColor,\r\n  };\r\n  return <td style={cellStyle}>{value}</td>;\r\n}\r\n\r\nconst daysOfWeek = [\"월\", \"화\", \"수\", \"목\", \"금\"];\r\nconst cellData = [\r\n  [\"A\", \"B\", \"C\", \"A\", \"B\"],\r\n  [\"C\", \"E\", \"A\", \"D\", \"A\"],\r\n  [\"E\", \"A\", \"A\", \"E\", \"C\"],\r\n  [\"F\", \"B\", \"B\", \"D\", \"G\"],\r\n  [\"G\", \"F\", \"E\", \"A\", \"F\"],\r\n  [\"G\", \"H\", \"H\", \"F\", null],\r\n];\r\n\r\nfunction getSubjectIndex(value: String) {\r\n  if (value == null) return -1;\r\n\r\n  const charCode = value.charCodeAt(0);\r\n  const aCode = \"A\".charCodeAt(0);\r\n\r\n  const index = charCode - aCode;\r\n\r\n  return index;\r\n}\r\n\r\nfunction getSubjectBackgroundColor(themeSet, value: String) {\r\n  const index = getSubjectIndex(value);\r\n  if (index < 0) return themeSet.backgroundColors.surface;\r\n  const seriesLength = themeSet.backgroundColors.series.length;\r\n\r\n  return themeSet.backgroundColors.series[index % seriesLength];\r\n}\r\n\r\nfunction getSubjectTextColor(themeSet, value: String) {\r\n  const index = getSubjectIndex(value);\r\n  if (index < 0) return themeSet.textColors.surface;\r\n  const seriesLength = themeSet.textColors.series.length;\r\n\r\n  return themeSet.textColors.series[index % seriesLength];\r\n}\r\n\r\nfunction getCellBackgroundTableData(themeSet, colorThemeType, cells) {\r\n  if (colorThemeType == \"solid\") {\r\n    return cells.map((row) =>\r\n      row.map((item) => themeSet.backgroundColors.primary)\r\n    );\r\n  } else if (colorThemeType == \"twotone\") {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((item, colIndex) =>\r\n        colIndex % 2 == 0\r\n          ? themeSet.backgroundColors.primary\r\n          : themeSet.backgroundColors.secondary\r\n      )\r\n    );\r\n  } else if (colorThemeType == \"checked\") {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((item, colIndex) =>\r\n        (rowIndex + colIndex) % 2 == 0\r\n          ? themeSet.backgroundColors.primary\r\n          : themeSet.backgroundColors.secondary\r\n      )\r\n    );\r\n  } else if (colorThemeType == \"subject\") {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((item, colIndex) => getSubjectBackgroundColor(themeSet, item))\r\n    );\r\n  }\r\n}\r\nfunction getCellTextTableData(themeSet, colorThemeType, cells) {\r\n  console.log(`Type: ${colorThemeType}`);\r\n  if (colorThemeType == \"solid\") {\r\n    return cells.map((row) => row.map((item) => themeSet.textColors.primary));\r\n  } else if (colorThemeType == \"twotone\") {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((item, colIndex) =>\r\n        colIndex % 2 == 0\r\n          ? themeSet.textColors.primary\r\n          : themeSet.textColors.secondary\r\n      )\r\n    );\r\n  } else if (colorThemeType == \"checked\") {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((item, colIndex) =>\r\n        (rowIndex + colIndex) % 2 == 0\r\n          ? themeSet.textColors.primary\r\n          : themeSet.textColors.secondary\r\n      )\r\n    );\r\n  } else if (colorThemeType == \"subject\") {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((item, colIndex) => getSubjectTextColor(themeSet, item))\r\n    );\r\n  }\r\n}\r\n\r\nfunction PreviewTable({ themeSet, colorThemeType }) {\r\n  const cellBackgroundColors = getCellBackgroundTableData(\r\n    themeSet,\r\n    colorThemeType,\r\n    cellData\r\n  );\r\n  const cellTextColors = getCellTextTableData(\r\n    themeSet,\r\n    colorThemeType,\r\n    cellData\r\n  );\r\n\r\n  console.log(\"BG: \" + cellBackgroundColors);\r\n  console.log(\"TX: \" + cellTextColors);\r\n\r\n  return (\r\n    <table style={style.table}>\r\n      <th\r\n        style={{\r\n          backgroundColor: themeSet.backgroundColors.headerSurface,\r\n        }}\r\n      ></th>\r\n      {daysOfWeek.map((value) => (\r\n        <th\r\n          style={{\r\n            backgroundColor:\r\n              value == \"목\"\r\n                ? themeSet.backgroundColors.headerHighlight\r\n                : themeSet.backgroundColors.headerSurface,\r\n            color:\r\n              value == \"목\"\r\n                ? themeSet.textColors.headerHighlight\r\n                : themeSet.textColors.headerSurface,\r\n          }}\r\n        >\r\n          {value}\r\n        </th>\r\n      ))}\r\n\r\n      {cellData.map((row, rowIndex) => (\r\n        <tr>\r\n          <td\r\n            style={{\r\n              backgroundColor: themeSet.backgroundColors.indexSurface,\r\n              color: themeSet.textColors.indexSurface,\r\n            }}\r\n          >\r\n            {rowIndex + 1}\r\n          </td>\r\n          {row.map((data, colIndex) => (\r\n            <Cell\r\n              value={data}\r\n              themeSet={themeSet}\r\n              backgroundColor={cellBackgroundColors[rowIndex][colIndex]}\r\n              textColor={cellTextColors[rowIndex][colIndex]}\r\n            />\r\n          ))}\r\n        </tr>\r\n      ))}\r\n    </table>\r\n  );\r\n}\r\n\r\nconst style = {\r\n  cell: {\r\n    borderWidth: 1,\r\n    borderStyle: \"solid\",\r\n    borderColor: \"rgba(0,0,0, .2)\",\r\n    width: \"48px\",\r\n    height: \"48px\",\r\n    textAlign: \"center\",\r\n  },\r\n  cellLightDivider: {\r\n    borderWidth: 1,\r\n    borderStyle: \"solid\",\r\n    borderColor: \"rgba(255, 255, 255, .5)\",\r\n    width: \"48px\",\r\n    height: \"48px\",\r\n    textAlign: \"center\",\r\n  },\r\n  table: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    borderSpacing: 0,\r\n  },\r\n};\r\n\r\nexport default PreviewTable;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PreviewTable from \"./Preview\";\r\n\r\nfunction PreviewSide({ themeSet }) {\r\n  const [colorThemeType, setColorThemeType] = useState(\"solid\");\r\n\r\n  return (\r\n    <PreviewSideContainer>\r\n      <PreviewSideInner>\r\n        <select\r\n          name=\"colorThemeType\"\r\n          onChange={(e) => {\r\n            const select = e.target;\r\n            const value = select.options[select.selectedIndex].value;\r\n            setColorThemeType(value);\r\n          }}\r\n        >\r\n          <option value=\"solid\">Solid</option>\r\n          <option value=\"twotone\">Two Tone</option>\r\n          <option value=\"checked\">Checked Pattern</option>\r\n          <option value=\"subject\">Various Colors (Subject)</option>\r\n        </select>\r\n        <PreviewTable themeSet={themeSet} colorThemeType={colorThemeType} />\r\n      </PreviewSideInner>\r\n    </PreviewSideContainer>\r\n  );\r\n}\r\n\r\nconst PreviewSideContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100vh;\r\n  border-right: 1px solid rgba(0, 0, 0, 0.2);\r\n  align-items: center;\r\n  justify-items: center;\r\n`;\r\n\r\nconst PreviewSideInner = styled.div`\r\n  text-align: center;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default PreviewSide;\r\n","import logo from \"./logo.svg\";\nimport FormSide from \"./components/FormSide\";\nimport PreviewSide from \"./components/PreviewSide\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { ThemeSet, ColorSet } from \"./data/ThemeSet\";\n\nfunction App() {\n  const [themeSet, setThemeSet] = useState(new ThemeSet());\n\n  const onModifyThemeSet = (modifiedParts) => {\n    setThemeSet({\n      ...themeSet,\n      ...modifiedParts,\n    });\n  };\n\n  return (\n    <AppContainer>\n      <PreviewSide themeSet={themeSet} onModifyThemeSet={onModifyThemeSet} />\n      <FormSide themeSet={themeSet} onModifyThemeSet={onModifyThemeSet} />\n    </AppContainer>\n  );\n}\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}